#!/bin/sh
# This is the simple installer script for LamPI
# (c) M. Westenberg, 2013, 2014
#
LINUX="y"; export LINUX
WIRING="y"; export WIRING
RRDTOOL="n"; export RRDTOOL
CRONTAB="y"; export CRONTAB

cd /home/pi
echo "This script will upgrade your Raspberry to its latest revision of software."
echo "It will instal MYSQL, PHP and Apache webserver packages which will take"
echo "some time to install. Please press enter to continue or CTRL-C to abort."
echo ""
echo -n "<Press ENTER to start>"
read a

# --------------------------------------------------------------
# General Linux bookkeeping and installatation of the latest packages
#
if [ $LINUX = "y" ]; then
  echo "Next step is to install Linux PHP, Mysql and Apache library"
  echo -n "<Press ENTER to continue>"
  read a
  echo ""
	apt-get update
	apt-get upgrade

	apt-get -y install php5
	apt-get -y install mysql-server
    apt-get -y install mysql-client
    apt-get -y install php5-mysql
    apt-get -y install php5-dev
    apt-get -y install php5-pear
	apt-get -y install apache2
	apt=get -y install rrdtool
    apt-get -y install i2c-tools
    apt-get -y install libpango1.0-dev libxml2-dev

	echo "All LamPI required packages have been installed"
	echo ""
fi
echo "Finished installing Linux packages"
echo ""

# -------------------------------------------------------------
# Some more administration to be done for modules
#

# Make sure that the database is in place
# Make sure that /etc/modprobe.d/raspi.conf contains # in front of i2c lines




# -------------------------------------------------------------
# Download, Install and build the wiringPI library of Gordon
#
if [ $WIRING != "n" ]; then
  echo "Next step is to install the wiringPI library"
  echo -n "<Press ENTER to continue>"
  read a
  echo ""
  echo "Starting installation of Wiring Libraries"
  sudo apt-get install git-core
  if [ -d wiringPi ]; then
	cd wiringPi
	git pull origin
  else
	git clone git://git.drogon.net/wiringPi
	cd wiringPi
	./build
  fi
	echo ""
fi

# --------------------------------------------------------------
# Install the LamPI software from the download server
#
cd /home/pi

# The command below will FAIL if the PI_install script is put in /home/pi/scripts or
# if the /home/pi directory is not empty. For safety we therefore copy to /tmp first.
#
rm -rf /tmp/effe
mkdir /tmp/effe
git clone git://github.com/platenspeler/LamPI-1.9 /tmp/effe
cd /tmp/effe; tar cf - . | ( cd /home/pi; tar xpf - )
rm -rf /tmp/effe

# ----------------------------------------------------------------
# Set the apache base directory
#
sudo sed 's|/var/www|/home/pi/www|g' /etc/apache2/sites-available/default > /tmp/effe
sudo mv /etc/apache2/sites-available/default /etc/apache2/sites-available/default.org
sudo mv /tmp/effe /etc/apache2/sites-available/default
sudo /etc/init.d/apache2 restart

# ----------------------------------------------------------------
# Configure MODULES
# Make the w1 bus modules load at system startup
# by adding module in the /etc/modules files
#
sudo echo 'w1-gpio' >> /etc/modules
sudo echo 'w1-therm' >> /etc/modules
sudo echo 'i2c-bcm2708' >> /etc/modules
sudo echo 'i2c-dev' >> /etc/modules

# Standard, there are two modules blacklisted in the raspi-blacklist.conf
# file as found the modprobe.d directory. Just comment these blaklisted
# modules out.
#
sudo sed 's|blacklist|#blacklist|g' /etc/modprobe.d/raspi-blacklist.conf > /tmp/effe
sudo mv /etc/modprobe.d/raspi-blacklist.conf /etc/modprobe.d/raspi-blacklist.conf.org
sudo mv /tmp/effe /etc/modprobe.d/raspi-blacklist.conf

# ------------------------------------------------------------
# Install RRDTOOL bindings
#
if [ $RRDTOOL != "n" ]; then
	echo ""
	echo "Installing RRDTOOL"
	sudo mkdir -p /usr/local/src/rrdtool-1.4.7
	cd /usr/local/src/rrdtool-1.4.7
	sudo wget http://oss.oetiker.ch/rrdtool/pub/rrdtool-1.4.7.tar.gz
	sudo tar -zxvf rrdtool-1.4.7.tar.gz
	cd rrdtool-1.4.7
	mkdir /tmp/rrdbuild
	export BUILD_DIR=/tmp/rrdbuild
	sudo mkdir /opt/rrdtool-1.4.7
	export INSTALL_DIR=/opt/rrdtool-1.4.7
	./configure --prefix=$INSTALL_DIR 
	make
	sudo make install

	sudo mkdir -p /usr/local/src/php-5.3.5/ext
	cd /usr/local/src/php-5.3.5/ext

	wget http://oss.oetiker.ch/rrdtool/pub/contrib/php_rrdtool.tar.gz
	tar -zxvf php_rrdtool.tar.gz
	cd rrdtool

	sudo phpize
	sudo ./configure --with-rrdtool=/opt/rrdtool-1.4.7 --with-php-config=/usr/bin/php-config
	#sudo ./configure --with-rrdtool=/usr/bin/ --with-php-config=/usr/bin/php-config
	sudo make
	sudo make install
fi

# -------------------------------------------------------------
# Finally, set some LamPI- related directories and permissions
#
mkdir /home/pi/log; chown pi /home/pi/log
mkdir /home/pi/exe


# --------------------------------------------------------------
# Fix the .exe directory
# And build the executables from source
#
cd /home/pi/receivers/sniffer; make
sudo make install

cd /home/pi/receivers/livolo; make
sudo make install

cd /home/pi/receivers/kaku; make
sudo make install

cd /home/pi/receivers/lights; make
sudo make install

cd /home/pi/receivers/kopou; make
sudo make install



# --------------------------------------------------------------
# Setup the crontab so that daemon and receiver are enabled.
#
if [ $CRONTAB = "y" ]; then
  echo "Next step is to install the crontab entries for the daemon"
  echo -n "<Press ENTER to continue>"
  read a
  echo ""
  echo "Setting up crontab"
  crontab -u pi -l | grep "PI-run" > /dev/null
  if [ $? = 0 ]; then
	echo "-- Crontab already contains LamPI PI-run commands"
  else
	echo "-- Crontab adding LamPI commands"
	crontab -u pi -l > /tmp/effe
    echo "* * * * * cd /home/pi/scripts && sh ./PI-run" >> /tmp/effe
    echo "* * * * * cd /home/pi/scripts && sh ./PI-rcv" >> /tmp/effe
    echo "0 2 * * * cd /home/pi/scripts && sh ./PI-log" >> /tmp/effe
    echo "* * * * * cd /home/pi/scripts && sh ./PI-1w"  >> /tmp/effe
    echo "*/5 * * * * cd /home/pi/scripts && sh ./PI-rht03" >> /tmp/effe
    crontab -u pi /tmp/effe
  fi
  
  if [ -f /etc/cron.allow ]; then
	cat /etc/cron.allow | grep pi > /dev/null
	if [ $? != 0 ]; then
		echo "pi" >> /etc/at.allow
	fi
  fi
  echo ""
fi
