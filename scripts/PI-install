#!/bin/bash
# This is the simple installer script for LamPI
# (c) M. Westenberg, 2013, 2014
#
# Basically there are 3 types of installation:
#
# 1. The LamPI-master containing the LamPI-daemon, and possibly some sensors incl LamPI-receiver
# 2. A LamPI slave, this is a Raspberry with only sensors or receiver/transmitter but is a slave 
#    of the Master. It does not contain a LamPI-daemon nor a database
# 3. A LamPI-z-way device. This is a Raspberry + Razberry combo acting as a gateway/slave
#    for controlling Z-Wave devices
#
LINUX="y"; export LINUX
WIRING="y"; export WIRING
RRDTOOL="n"; export RRDTOOL
RAZBERRY="n"; export RAZBERRY
CRONTAB="y"; export CRONTAB
HOMEDIR="/home/pi"; export HOMEDIR

# --------------------------------------------------------------
# NOTE: Since WIFI does not work out of the box, this initial setup must be
# done over a network connection. As soon as WIFI works further access
# can be done over WIFI



# --------------------------------------------------------------
# General Linux bookkeeping and installatation of the latest packages
#
install_linux()
{
	sudo apt-get update
	sudo apt-get upgrade

	sudo apt-get -y install php5
	sudo apt-get -y install mysql-server
    sudo apt-get -y install mysql-client
    sudo apt-get -y install php5-mysql
    sudo apt-get -y install php5-dev
    sudo apt-get -y install php5-pear
    sudo apt-get -y install php5-curl
	sudo apt-get -y install apache2
	sudo apt=get -y install rrdtool
    sudo apt-get -y install i2c-tools
    sudo apt-get -y install libpango1.0-dev libxml2-dev
    // sudo apt-get -y install wpasupplicant wireless-tools
    sudo apt-get -y install phpmyadmin

	echo "All LamPI required packages have been installed"
	echo ""
}


# -------------------------------------------------------------
# Download, Install and build the RazBerry software.
# Only do this if you have a Razberry installed 
#
install_zway()
{
	echo "Starting installation of Z-Way Razberry"
	wget -q -O - http://razberry.zwave.me/install/v1.7.1 | sudo bash 
	# Edit the /opt/Z-Way/config.xml
	# reboot
	
    echo ""
    cd $HOMEDIR
	echo "Installing node.js and npm packages, takes a LOT of time"
    # sudo apt-get -y install node.js

    wget http://nodejs.org/dist/node-latest.tar.gz
	tar xvfvz node-latest.tar.gz
	cd node-v0* 
	./configure
	make
	sudo make install 
   
    sudo apt-get -y install npm 
}


# -------------------------------------------------------------
# Download, Install and build the wiringPI library of Gordon
#
install_wiringpi()
{
	echo ""
	echo "Starting installation of Wiring Libraries"
	sudo apt-get install git-core
	if [ -d wiringPi ]; then
		cd wiringPi
		git pull origin
	else
		git clone git://git.drogon.net/wiringPi
		cd wiringPi
		./build
	fi
	echo ""
}

# --------------------------------------------------------------
# Install the LamPI software from the download server
#
install_lampi()
{
	cd $HOMEDIR

	# The command below might FAIL if the PI-install script is put in $HOMEDIR/scripts and
	# if the $HOMEDIR directory is not empty. For safety we therefore copy to /tmp first.
	#
	rm -rf /tmp/effe
	mkdir /tmp/effe
	git clone git://github.com/platenspeler/LamPI-2.0 /tmp/effe
	cd /tmp/effe; tar cf - . | ( cd $HOMEDIR; tar xpf - )
	rm -rf /tmp/effe

	# ----------------------------------------------------------------
	# Set the apache base directory, replace the standard /var/www directory
    # withthe new /home/pi/www directory as in $HOMEDIR/www
	#
	sudo sed 's|/var/www|$HOMEDIR/www|g' /etc/apache2/sites-available/default > /tmp/effe
	sudo mv /etc/apache2/sites-available/default /etc/apache2/sites-available/default.org
	sudo mv /tmp/effe /etc/apache2/sites-available/default
	sudo /etc/init.d/apache2 restart
}


# ------------------------------------------------------------
# Install RRDTOOL bindings
#
install_rrdtool()
{
	echo "Installing RRDTOOL"
	sudo mkdir -p /usr/local/src/rrdtool-1.4.7
	cd /usr/local/src/rrdtool-1.4.7
	sudo wget http://oss.oetiker.ch/rrdtool/pub/rrdtool-1.4.7.tar.gz
	sudo tar -zxvf rrdtool-1.4.7.tar.gz
	cd rrdtool-1.4.7
	mkdir /tmp/rrdbuild
	export BUILD_DIR=/tmp/rrdbuild
	sudo mkdir /opt/rrdtool-1.4.7
	export INSTALL_DIR=/opt/rrdtool-1.4.7
	./configure --prefix=$INSTALL_DIR 
	make
	sudo make install

	sudo mkdir -p /usr/local/src/php-5.3.5/ext
	cd /usr/local/src/php-5.3.5/ext

	wget http://oss.oetiker.ch/rrdtool/pub/contrib/php_rrdtool.tar.gz
	tar -zxvf php_rrdtool.tar.gz
	cd rrdtool

	sudo phpize
	sudo ./configure --with-rrdtool=/opt/rrdtool-1.4.7 --with-php-config=/usr/bin/php-config
	#sudo ./configure --with-rrdtool=/usr/bin/ --with-php-config=/usr/bin/php-config
	sudo make
	sudo make install
}

# ----------------------------------------------------------------
# Configure MODULES
# Make the w1 bus modules load at system startup
# by adding module in the /etc/modules files
#
setup_modules()
{
	sudo echo 'w1-gpio' >> /etc/modules
	sudo echo 'w1-therm' >> /etc/modules
	sudo echo 'i2c-bcm2708' >> /etc/modules
	sudo echo 'i2c-dev' >> /etc/modules

	# Standard, there are two modules blacklisted in the raspi-blacklist.conf
	# file as found the modprobe.d directory. Just comment these blaklisted
	# modules out.
	#
	sudo sed 's|blacklist|#blacklist|g' /etc/modprobe.d/raspi-blacklist.conf > /tmp/effe
	sudo mv /etc/modprobe.d/raspi-blacklist.conf /etc/modprobe.d/raspi-blacklist.conf.org
	sudo mv /tmp/effe /etc/modprobe.d/raspi-blacklist.conf
}


# --------------------------------------------------------------
# Setup the crontab so that daemon and receiver are enabled.
#
setup_cron()
{
	echo "Setting up crontab"
	crontab -u pi -l | grep "PI-run" > /dev/null
	if [ $? = 0 ]; then
		echo "-- Crontab already contains LamPI PI-run commands"
	else
		echo "-- Crontab adding LamPI commands"
		crontab -u pi -l > /tmp/effe

		echo "* * * * * cd $HOMEDIR/scripts && sh ./PI-rcv" >> /tmp/effe
		echo "0 2 * * * cd $HOMEDIR/scripts && sh ./PI-log" >> /tmp/effe
		echo "* * * * * cd $HOMEDIR/scripts && sh ./PI-1w"  >> /tmp/effe
		echo "*/5 * * * * cd $HOMEDIR/scripts && sh ./PI-rht03" >> /tmp/effe
        if [ "$1" == "-m" ]; then
			echo "Setting up contab with PI-run for manager"
			echo "* * * * * cd $HOMEDIR/scripts && sh ./PI-run" >> /tmp/effe
		else
        	echo "Setting up contab for slave"
        fi
		crontab -u pi /tmp/effe
	fi
  
	if [ -f /etc/cron.allow ]; then
		cat /etc/cron.allow | grep pi > /dev/null
		if [ $? != 0 ]; then
			echo "pi" >> /etc/at.allow
		fi
	fi
	echo ""
}


# -------------------------------------------------------------
# Some Wlan Network configuration settings
#
setup_wlan()
{
	grep "network" /etc/wpa_supplicant/wpa_supplicant.conf > /dev/null
	if [ $? = 0 ]; then
		echo "-- wpa_supplicant.conf already contains network clause"
	else
		sudo echo " \
network={ \
	ssid="platenspeler" \
	scan_ssid=0 \
	psk="password" \
	proto=RSN \
	key_mgmt=WPA-PSK \
	pairwise=CCMP \
	auth_alg=OPEN \
	}" >> /etc/wpa_supplicant/wpa_supplicant.conf
	fi
}




# -----------------------------------------------------------------------
# MAIN PROGRAM
#
#
cd $HOMEDIR

echo "This script will upgrade your Raspberry to its latest revision of software."
echo "It will instal MYSQL, PHP and Apache webserver packages which will take"
echo "some time to install. Please press enter to continue or CTRL-C to abort."
echo ""
echo -n "<Press ENTER to start>"
read a


a=""
isdone="N"

while [ "$isdone" != "Y"  ]
do
	clear
	echo "Do you want to install a LamPI master node (M), a slave node (S) or a Z-Way gateway (Z)?"
	echo -n "<Enter M, S, or Z  + ENTER to continue> "
	read a
	if [ "$a" == "M" ]; then
		echo "Installing a Master Node"
   	 	install_linux
    	install_wiringpi
    	install_lampi
   	 	install_rrdtool
		setup_wlan
		setup_modules
    	setup_cron -m
        isdone="Y"

	elif [ "$a" == "S" ]; then
		echo "Installing a LamPI Slave Node"
		install_linux
		install_wiringpi
		install_lampi
		setup_wlan
		setup_modules
		setup_cron
        isdone="Y"

	elif [ "$a" == "Z" ]; then
		echo "Installing a Z-Way Gateway Node"
    	install_zway
        isdone="Y"
    
    else
    	echo "Incorrect Input, Please try again.."
        sleep 2
    fi
done

# -------------------------------------------------------------
# Finally, set some LamPI- related directories and permissions
#
mkdir $HOMEDIR/log; chown pi $HOMEDIR/log
mkdir $HOMEDIR/exe
mkdir $HOMEDIR/daemon


# --------------------------------------------------------------
# Fix the .exe directory And build the executables from source
#

cd $HOMEDIR/receivers/sniffer; make; sudo make install
cd $HOMEDIR/receivers/livolo; make ; sudo make install
cd $HOMEDIR/receivers/kaku; make; sudo make install
cd $HOMEDIR/receivers/lights; make; sudo make install
cd $HOMEDIR/receivers/kopou; make; sudo make install


# -------------------------------------------------------------
# Some more administration to be done for modules
# Make sure that the database is in place
# Make sure that /etc/modprobe.d/raspi.conf contains # in front of i2c lines

echo "Do not forget to setup Wifi controllers if you have these"
echo "sudo vi /etc/network/interfaces"

echo ""
echo "If you plan to run one database server and have clients connect"
echo "make sure you update bind in /etc/mysql/my.cnf"
